
# Bazel settings that apply to this repository.
# Take care to document any settings that you expect users to apply.
# Settings that apply only to CI are in .github/workflows/ci.bazelrc

common --enable_bzlmod

# Load any settings specific to the current user.
# .bazelrc.user should appear in .gitignore so that settings are not shared with team members
# This needs to be last statement in this
# config, as the user configuration should be able to overwrite flags from this file.
# See https://docs.bazel.build/versions/master/best-practices.html#bazelrc
# (Note that we use .bazelrc.user so the file appears next to .bazelrc in directory listing,
# rather than user.bazelrc as suggested in the Bazel docs)
try-import %workspace%/.bazelrc.user

common --@aspect_rules_ts//ts:skipLibCheck=always

# Use "tsc" as the transpiler when ts_project has no `transpiler` set.
# Bazel 6.4 or greater: 'common' means 'any command that supports this flag'
common --@aspect_rules_ts//ts:default_to_tsc_transpiler

# common --@aspect_rules_lint//lint:fail_on_violation

common --noenable_workspace

# Enabled local disk cache
# Use `$ bazel build //... --explain=.cache/bazel/cache.log --verbose_explanations`
build --disk_cache=.cache/bazel

# ----------------------------------------------
# RBE (Remote Bazel Execution): Setup
# ----------------------------------------------
build --bes_results_url=https://app.buildbuddy.io/invocation/
build --bes_backend=grpcs://remote.buildbuddy.io
build --remote_cache=grpcs://remote.buildbuddy.io
# build --remote_executor=grpcs://remote.buildbuddy.io

# RBE: configure hidden api key
# build --remote_header=x-buildbuddy-api-key=<<YOUR API KEY>>
# Use bazelrc.local file which should be in .gitignore and contain
# next line: "build --remote_header=x-buildbuddy-api-key=<<YOUR API KEY>>
# To create your BUILD_BUDDY API KEY simply create your free personal account.
try-import %workspace%/.bazelrc.local

# RBE:
build --remote_download_minimal
# RBE: timeout
build --remote_timeout=3600
# RBE: improve remote cache throughput.
build --remote_cache_compression
# RBE: significantly reduce the payload size of the uploaded build event stream by eliminating duplicate file references.
build --nolegacy_important_outputs
# RBE: for a more detailed timing profile
build --noslim_profile --experimental_profile_include_target_label --experimental_profile_include_primary_output
# RBE: to avoid inflating blobs smaller than 100 bytes with ZSTD compression.
build --experimental_remote_cache_compression_threshold=100
# ----------------------------------------------
